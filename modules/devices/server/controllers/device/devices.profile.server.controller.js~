'use strict';

/**
 * Module dependencies.
 */
var _ = require('lodash'),
  fs = require('fs'),
  path = require('path'),
  errorHandler = require(path.resolve('./modules/core/server/controllers/errors.server.controller')),
  mongoose = require('mongoose'),
  config = require(path.resolve('./config/config')),
  Devices = mongoose.model('Devices');

/**
 * Update user details
 */
/*
exports.update = function (req, res) {
  // Init Variables
  var user = req.user;

  // For security measurement we remove the roles from the req.body object
  delete req.body.roles;

  if (user) {
    // Merge existing user
    user = _.extend(user, req.body);
    user.updated = Date.now();
    user.displayName = user.firstName + ' ' + user.lastName;

    user.save(function (err) {
      if (err) {
        return res.status(400).send({
          message: errorHandler.getErrorMessage(err)
        });
      } else {
        req.login(user, function (err) {
          if (err) {
            res.status(400).send(err);
          } else {
            res.json(user);
          }
        });
      }
    });
  } else {
    res.status(400).send({
      message: 'User is not signed in'
    });
  }
};

/**
 * Update profile picture
 */

exports.create = (function (req, res) {
  var device = req.device;
  var message = null;
  device.save(function (saveError) {
    if (saveError) {
      return res.status(400).send({
        message: errorHandler.getErrorMessage(saveError)
      });
    } else {
      req.login(device, function (err) {
        if (err) {
          res.status(400).send(err);
        } else {
          res.json(device);
        }
      });
    }
  });
});

exports.update = (function (req, res) {
  var device = req.device;
  var message = null;
  device.findById( req.params.devicesId, function (saveError) {
    if (saveError) {
      return res.status(400).send({
        message: errorHandler.getErrorMessage(saveError)
      });
    } else {
      req.login(device, function (err) {
        if (err) {
          res.status(400).send(err);
        } else {
          res.json(device);
        }
      });
    }
  });
});

exports.delete = (function (req, res) {
  var device = req.device;
  var message = null;
  device.save(function (saveError) {
    if (saveError) {
      return res.status(400).send({
        message: errorHandler.getErrorMessage(saveError)
      });
    } else {
      req.login(device, function (err) {
        if (err) {
          res.status(400).send(err);
        } else {
          res.json(device);
        }
      });
    }
  });
});

/**
 * Send Devices
 */
exports.read = function (req, res) {
  Devices.find({}, function(err, devices) {
    res.send(devices);
  }); 
};
